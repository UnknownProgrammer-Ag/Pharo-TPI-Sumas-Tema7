SimpleSwitchMorph subclass: #Bloque	instanceVariableNames: 'mouseAction n'	classVariableNames: ''	package: 'Sumas Bizarras'!!Bloque commentStamp: 'AgustinBalbuena 11/16/2023 22:43' prior: 0!"Represento a los bloques que componen la matriz"!!Bloque methodsFor: 'event handling' stamp: 'AgustinBalbuena 11/26/2023 06:04'!mouseUp: anEvent"Esto va a observar cuando el mouse se levante, representando el click, y va a ejecutar el valor de mouseAction "	mouseAction value! !!Bloque methodsFor: 'event handling' stamp: 'AgustinBalbuena 11/26/2023 06:03'!mouseMove: anEvent"Metodo para seguir el movimiento del mouse, asi lo explica la documentacion"! !!Bloque methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 06:05'!n"Getter de n para obtener el puntaje"	^ n! !!Bloque methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 06:05'!mouseAction: anEvent"Metodo getter/setter que ejecuta el bloque de codigo asignado a mouseAction, visto en crearBloque o crearBizarro"	^mouseAction := anEvent! !!Bloque methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 06:05'!n: anObject"Setter que no se uso pero lo dejamos porque no afecta"	n := anObject! !!Bloque methodsFor: 'initialization' stamp: 'AgustinBalbuena 11/26/2023 06:01'!initialize "Metodo para crear el morph bloque, el valor n es el entero que se va a sumar al puntaje cuando el jugador interactue con el bloque"			super initialize.	self n: (1 to: 85) atRandom.	self label:(self n)asString.	self borderWidth: 5.	bounds:= 0@0 corner: 75@75.	onColor := (Color lightGray).	offColor := Color darkGray.	self useRoundedCorners.	self turnOn.	! !Bloque subclass: #Bizarro	instanceVariableNames: 'personalidad'	classVariableNames: ''	package: 'Sumas Bizarras'!!Bizarro commentStamp: 'AgustinBalbuena 11/26/2023 04:45' prior: 0!"Represento una subclase de bloque que tiene una personalidad variante (Puedo ser bueno o malo)"!!Bizarro methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 04:52'!personalidad	^ personalidad! !!Bizarro methodsFor: 'initialization' stamp: 'AgustinBalbuena 11/26/2023 04:48'!initialize	super initialize.	self n: (1 to: 85) atRandom.	self label:(self n)asString.	self borderWidth: 5.	bounds:= 0@0 corner: 75@75.	onColor := (Color r:0.23 g:0.46 b:0.70 alpha:1).	offColor := (Color r:0.078 g:0.29 b:0.53 alpha:1).	self useRoundedCorners.	self turnOn.	personalidad:=((1 to:2) atRandom).	! !BorderedMorph subclass: #Inicio	instanceVariableNames: ''	classVariableNames: ''	package: 'Sumas Bizarras'!!Inicio commentStamp: 'AgustinBalbuena 11/17/2023 14:23' prior: 0!"Representa el inicio del juego que al comenzar la partida"!!Inicio methodsFor: 'initialization' stamp: 'AgustinBalbuena 11/26/2023 05:46'!reiniciar	"Este metodo se utiliza cuando salimos de la Ayuda para volver al menu principal"	Inicio  new openInWorld.	! !!Inicio methodsFor: 'initialization' stamp: 'AgustinBalbuena 11/26/2023 06:10'!ayuda	"Este método usa estructuras de morph para crear un cuadro de texto que explique al usuario las caracteristicas del juego"	|texto cuadro botonCerrar|	self terminar.	cuadro:= BorderedMorph new.	cuadro bounds: (1500@550 corner:700@300).	cuadro color: (Color r:0.38 g:0.33 b:0.39 alpha:1).	texto:= TextMorph new.	texto contents: 'La dificultad se divide en tres niveles:-El primer nivel no tiene bloques sorpresa y es el tamaño más reducido.-El segundo nivel es el modo normal, el modelo original del juego.-El tercer nivel, el modo dificil aumenta el tamaño a 9x9 y agrega bloques bizarros.-Los bloques bizarros tendran una personalidad buena o enojada.-Cada uno te dara un bonus o penalizacion. El nivel de estos dependera de sus gustos.-Los gustos de cada bloque impactaran en la cantidad de puntos basados en el total de tu puntaje que te sumaran o restaran.-Si tu puntaje es par el bloque Bueno será más feliz, si es impar el enojado será menos gruñon'.	texto center: cuadro center.	cuadro addMorph: texto.		botonCerrar:= self boton: 'Entendido' ejecutar: [cuadro delete.		self reiniciar].	botonCerrar position: (cuadro position+(300@252)).	cuadro addMorph: botonCerrar.	cuadro openInWorld.			! !!Inicio methodsFor: 'initialization' stamp: 'AgustinBalbuena 11/26/2023 06:10'!initialize	"Este metodo inicializa toda la parte grafica del menu, genera los botones y los adhiere a la estructura"	|cabecera botonInicio botonCerrar botonAyuda|		super initialize.	self bounds: (1050@250 corner:850@550).	self color: (Color r: 0.155 g:0.212 b:0.33822 alpha:0.75).		cabecera := StringMorph contents: 'Sumas Bizarras'.	cabecera position: (self position + (50@50)).	self addMorph: cabecera.		botonInicio:= self boton: 'Iniciar Partida' ejecutar:[self inicioPartida].	botonAyuda := self boton: 'Explicar Niveles de Dificultad' ejecutar:[self ayuda].	botonCerrar := self boton: 'Cerrar Juego' ejecutar:[self terminar].	botonInicio position: (self position + (50@100)).	botonAyuda position: (self position + (16@150)).	botonCerrar position: (self position + (53@200)).	self addMorph: botonInicio.	self addMorph: botonAyuda.	self addMorph: botonCerrar.		self openInWorld.				! !!Inicio methodsFor: 'initialization' stamp: 'AgustinBalbuena 11/26/2023 05:44'!boton: etiqueta ejecutar: accion	"Metodo auxiliar para crear botones en la interfaz, necesarios para los botones de ayuda, iniciar partida y cerrar, tambien usado en la clase partida"		|boton|	boton := SimpleButtonMorph new label: etiqueta. "El Morph de boton, la clase, cuenta con la caracteristica de manejar estados, encendido y apagado por defecto cuando se genera un evento de click de boton"	boton color: (Color r:0  g:51  b:102  alpha:0.5) .	boton borderWidth:  1.	boton borderColor: Color black.	boton extent: 90@50.	boton fitContents.	boton on: #click send: #value to: accion.	^boton. ! !!Inicio methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 14:03'!inicioPartida	"Este método simplemente desencadena una instancia de partida a la vez que destruye la instancia de menu"	|part|	self delete.	part:= Partida new openInWorld.! !!Inicio methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 13:57'!terminar	"Este método elimina a la instancia de menu"	|mensaje|	mensaje:= (UIManager default 						   chooseFrom: #('Si' 'No') 	values: #(1 2)   lines:  #(1 2) message: '¿Desea cerrar el juego?'  title: 'Cerrar').	(mensaje=1) ifTrue:  [ self delete ]			  		ifFalse: [ UIManager default alert:'Bien, tenga cuidado la proxima'].		! !Object subclass: #Jugador	instanceVariableNames: 'nombre puntaje estado coordenadaLock'	classVariableNames: ''	package: 'Sumas Bizarras'!!Jugador commentStamp: 'AgustinBalbuena 11/16/2023 22:43' prior: 0!"Represento a los jugadores"!!Jugador methodsFor: 'initialization' stamp: 'AgustinBalbuena 11/26/2023 05:56'!crear: aString inicia: aCoord"Constructor personalizado para recibir parámetros"	nombre:=aString.	puntaje:=0.	estado:= ''.	coordenadaLock:=aCoord.! !!Jugador methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 05:57'!estado"Getter de estado para comprobaciones booleanas"	^ estado! !!Jugador methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 06:00'!restarValor: aNumber"Setter especial para restar al puntaje"	puntaje:=puntaje-aNumber.! !!Jugador methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 05:56'!coordenadaLock"Getter para leer la coordenada asignada"	^ coordenadaLock! !!Jugador methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 06:00'!sumarValor: aNumber"Setter especial para sumar al puntaje"	puntaje:=puntaje+aNumber.! !!Jugador methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 05:59'!nombre"Getter del nombre para imprimir los mensajes"	^nombre.! !!Jugador methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 05:59'!puntaje"Getter del puntaje que se usa para imprimir o comparar valores"	^puntaje! !!Jugador methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 05:56'!coordenadaLock: anObject"Setter para definir la coordenada correspondiente"	coordenadaLock := anObject! !!Jugador methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 05:57'!estado: anObject"Setter de estado para definir momentos de la partida"	estado := anObject! !BorderedMorph subclass: #Partida	instanceVariableNames: 'tablero dificultad p1 p2 ronda'	classVariableNames: ''	package: 'Sumas Bizarras'!!Partida commentStamp: 'AgustinBalbuena 11/16/2023 22:42' prior: 0!"Represento la Partida, involucro todo lo que se refiere al tablero y los jugadores"!!Partida methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 13:08'!crearBizarro: i at: j	"Metodo de creacion del objeto Bizarro, subclase de bloque"	|mutacion temp origen|	mutacion:=((1 to:2) atRandom).	temp:= mutacion = 1	 "No se dio la mutacion, es un bloque normal"	ifTrue: [Bloque new]	ifFalse:[Bizarro new].		origen:= self innerBounds origin.	temp position: ((i-1)*temp width)@((j-1)*temp height) + origen.	temp mouseAction: [ self procesarEleccionAt: i at: j ].	self addMorph: temp.	^temp! !!Partida methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 05:49'!dificultad	"Getter de dificultad"	^ dificultad! !!Partida methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 14:00'!procesarEleccionAt:i at: j"Este es el método principal donde se verifica en cada interaccion con un bloque que acción realizar, esto desencadena una alerta de movimiento invalido o suma de puntos"|puntos|puntos:=((tablero at:i at:j) n)asInteger.	((p1 estado)='Jugando')ifTrue:[					((p1 coordenadaLock)= j)ifTrue:[				(tablero at:i at:j)turnOff . "Se bloquea ese valor"				p1 sumarValor: puntos .				p1 estado: 'En Espera'.				p2 estado: 'Jugando'.				p2 coordenadaLock: i.				UIManager default alert: 'Turno de: ',(p2 nombre) asString.				((tablero at:i at:j)class = Bizarro)ifTrue:[							self procesarBizarro: (tablero at:i at:j) jugador: p1				].								]ifFalse:[UIManager default alert: 'Esa posicion esta fuera de alcance'].				]ifFalse:[ "Si el p1 no esta jugando es turno de p2"						((p2 coordenadaLock)= i)ifTrue:[				(tablero at:i at:j)turnOff. "Se bloquea ese valor"				p2 sumarValor: puntos.				p2 estado: 'En Espera'.				p1 estado: 'Jugando'.				p1 coordenadaLock: j.				ronda:= ronda+1.				UIManager default alert: 'Inicio de la ronda: ',ronda asString,'. Turno de: ',(p1 nombre) asString.				((tablero at:i at:j)class = Bizarro)ifTrue:[						self procesarBizarro: (tablero at:i at:j) jugador: p2				].							]ifFalse:[UIManager default alert: 'Esa posicion esta fuera de alcance '].	].self verificarResultados.! !!Partida methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 05:52'!p2"Getter de p2, no se usa pero se lo mantiene por si se lo necesita"	^ p2! !!Partida methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 13:18'!procesarBizarro: aBlock jugador: aPlayer"Método para procesar a los bloques bizarros"					(aBlock personalidad = 1)ifTrue:[						UIManager default alert: 'Caiste en un bloque bizarro BUENO. Le gustan los valores pares'.						((aPlayer puntaje \\ 2)=0)ifTrue:[aPlayer sumarValor: (aPlayer puntaje//4)]ifFalse:[aPlayer sumarValor: (aPlayer puntaje //5)].]					ifFalse:[											UIManager default alert: 'Caiste en un bloque bizarro ENOJADO. Le gustan los valores impares'.						((aPlayer puntaje \\ 2)~=0)ifTrue:[aPlayer restarValor: (aPlayer puntaje//5)]ifFalse:[aPlayer restarValor: (aPlayer puntaje //4)].].														"((tablero at:i at:j) personalidad = 1)ifTrue:[						UIManager default alert: 'Caiste en un bloque bizarro BUENO. Le gustan los valores pares'.						((p2 puntaje \\ 2)=0)ifTrue:[p2 sumarValor: (p2 puntaje//4)]ifFalse:[p2 sumarValor: (p2 puntaje //5)].]					ifFalse:[											UIManager default alert: 'Caiste en un bloque bizarro ENOJADO. Le gustan los valores impares'.						((p2 puntaje \\ 2)~=0)ifTrue:[p2 restarValor: (p2 puntaje//5)]ifFalse:[p2 restarValor: (p2 puntaje //4)].]."! !!Partida methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 13:57'!terminar	"Elimina el tablero"	|mensaje|	mensaje:= (UIManager default 						   chooseFrom: #('Si' 'No') 	values: #(1 2)   lines:  #(1 2) message: '¿Desea cerrar el juego?'  title: 'Cerrar').	(mensaje=1) ifTrue:  [ self delete ]			  		ifFalse: [ UIManager default alert:'Bien, tenga cuidado la proxima'].! !!Partida methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 05:52'!p1	"Getter de p1, no se usa pero se lo mantiene por si se lo necesita"	^ p1! !!Partida methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 05:55'!verificarResultados	"Recorre el tablero, si todos los bloques estan tachados termina el juego"	|estado|	estado:= true.	1 to: dificultad do: [ :i|		1 to: dificultad do:[ :j|				(tablero at:i at:j)isOn ifTrue:[estado:=false] "Si alguna casilla todavía esta encendida continua el juego"						]		 ].	estado ifTrue:[ self mostrarGanador.]! !!Partida methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 13:45'!pasar"Método que designa la funcionalidad de pasar de turno, el boton al activarse verifica en todo el tablero si existe algun bloque libre y envia al jugador posterior al que paso turno a esa localizacion"	|resgi resgj|	1 to: dificultad do: [ :i|		1 to: dificultad do:[ :j|				(tablero at:i at:j)isOn ifTrue:[resgi:=i.					resgj:=j]]].	((p1 estado)='Jugando')ifTrue:[			p1 estado: 'En Espera'.			p2 estado: 'Jugando'.			p2 coordenadaLock: resgi.			UIManager default alert: 'Pasa el turno a Jugador: ',p2 nombre,' en la columna',resgi asString. 		]ifFalse:[			p1 estado: 'Jugando'.			p2 estado: 'En Espera'.			p1 coordenadaLock: resgj.			UIManager default alert: 'Pasa el turno a Jugador: ',p1 nombre,' en la fila',resgj asString.			ronda:=ronda+1.		]! !!Partida methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 13:54'!reinicio	"Igual que en inicio, elimina la instancia actual y crea una nueva"	|mensaje|	mensaje:= (UIManager default 						   chooseFrom: #('Si' 'No') 	values: #(1 2)   lines:  #(1 2) message: '¿Desea reiniciar el juego?'  title: 'Nuevo Juego').	(mensaje=1) ifTrue:  [ self delete.		Partida new openInWorld. ]			  		ifFalse: [ UIManager default popUpInWorld:'Bien, cuando quieran'].	! !!Partida methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 05:49'!crearBloque: i at: j	"Método de creacion de instancia de clase Bloque"	|temp origen|	origen:= self innerBounds origin.	temp:=Bloque new.	temp position: ((i-1)*temp width)@((j-1)*temp height) + origen.	temp mouseAction: [ self procesarEleccionAt: i at: j ].	self addMorph: temp.	^temp! !!Partida methodsFor: 'accessing' stamp: 'AgustinBalbuena 11/26/2023 14:06'!mostrarGanador"Método que se desencadena cuando todo el tablero esta ocupado, y muestra al puntaje ganador"	| mensaje ganador puntW puntL|	(p1 puntaje > p2 puntaje)ifTrue: [ganador:=p1 nombre.									puntW:=p1 puntaje.									puntL:=p2 puntaje]		           ifFalse: [ ganador:=p2 nombre.									puntW:=p2 puntaje.									puntL:=p1 puntaje].	mensaje := UIManager default		           chooseFrom: #( 'Nuevo Juego' 'Cerrar' )		           values: #( 1 2 )		           lines: #( 1 2 )		           message:		           'Con un puntaje de: ',puntW asString ,' contra un puntaje de: ',puntL asString,'. El jugador: ',ganador,' es declarado ganador.'		           title: 'Despues de: 'ronda asString,' Rondas...Tenemos un GANADOR!!'.	mensaje = 1		ifTrue: [ self reinicio ]		ifFalse: [ self terminar ]! !!Partida methodsFor: 'initialization' stamp: 'AgustinBalbuena 11/26/2023 14:02'!initialize"Este método inicializa la estructura grafica del tablero, además de declarar los valores de inicio de juego tales como nombre de jugador, zona de inicio, dificultadTambien genera tableros distintos en funcion de la dificultad y de la variación dificil"	| bloque alto ancho n |	super initialize.	bloque := Bloque new.	alto := bloque height.	ancho := bloque width.	self elegirDificultad.	n := dificultad.	ronda:= 1.		p1 := Jugador new.	p1		crear: (UIManager default request: 'Nombre Jugador1 [Filas]')		inicia: n // 2 + 1.	p1 estado: 'Jugando'.	p2 := Jugador new.	p2		crear: (UIManager default request: 'Nombre Jugador2 [Columnas]')		inicia: 0.	p2 estado: 'En Espera'.			self bounds:		(755 @ 240 extent: ancho * n @ (alto * n) + (2 * self borderWidth)).	self color: (Color pink alpha: 0.5).		tablero := dificultad = 9		           ifFalse: [		           Array2D			           new: n			           tabulate: [ :i :j | self crearBloque: i at: j ] ]		           ifTrue: [		           Array2D			           new: n			           tabulate: [ :i :j | self crearBizarro: i at: j ] ].	self funcionalidades.		UIManager default alert: 'Inicio de Partida: Ronda 1. Turno de ',p1 nombre.! !!Partida methodsFor: 'initialization' stamp: 'AgustinBalbuena 11/26/2023 05:50'!elegirDificultad	"Setter de dificultad que usa UIManager para mostrar una lista de opciones"	dificultad:=(UIManager default 	chooseFrom: #('Facil (5x5)' 'Normal (7x7)' 'Dificil (9x9)') 	values: #(5 7 9) 	lines: #(1 2 3) 	message: 'Elija la dificultad [Dificil solo para los expertos]' title: 'Sumas Bizarras'). ! !!Partida methodsFor: 'initialization' stamp: 'AgustinBalbuena 11/26/2023 05:50'!funcionalidades	"Método de construcción puramente gráfico, para la sección de botones con funciones del tablero"	|barra botonReinicio botonCerrar botonPasar vs|	barra := Morph new layoutPolicy: RowLayout new; color: Color transparent.		botonReinicio  := self boton: 'Reiniciar' ejecutar: [ self reinicio ].	botonCerrar := self boton: 'Cerrar' ejecutar: [ self terminar ].	botonPasar := self boton: 'Pasar Turno' ejecutar: [ self pasar ].		vs:= self mostrarOponentes.		barra addMorphCentered: botonCerrar.	barra addMorph: botonReinicio.	barra addMorph: botonPasar.		(tablero at:1 at:1) addMorph: vs.	(tablero at:1 at:1) addMorph: barra.	barra position: 1000@200.	^barra	 ! !!Partida methodsFor: 'initialization' stamp: 'AgustinBalbuena 11/26/2023 05:48'!boton: etiqueta ejecutar: accion"Igual al de inicio, método auxiliar de creacion de interfaz"	|boton|	boton := SimpleButtonMorph new label: etiqueta.	boton color: (Color r:0  g:51  b:102  alpha:0.5)  .	boton borderWidth:  1.	boton borderColor: Color black.	boton extent: 90@50.	boton fitContents.	boton on: #click send: #value to: accion.	^boton.  ! !!Partida methodsFor: 'initialization' stamp: 'AgustinBalbuena 11/26/2023 05:51'!mostrarOponentes"Método secundario de funcionalidades, para generar el Morph que muestra a los jugadores"| jugadores duel|duel:=BorderedMorph new.duel bounds:(0@0 corner:180@30).duel position: 850@170.duel color: (Color r:0.041 g:0.51 b:0.30 alpha:1).duel borderWidth: 1.duel borderColor: Color black.	jugadores := TextMorph new.jugadores contents: (p1 nombre,' vs ',p2 nombre).jugadores center: duel center.duel addMorph: jugadores.^duel.! !